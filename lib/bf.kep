/**
 * @fileOverview Very basic Brainfuck interpreter.
 * 
 * Does not use real IO but a state for input and console for output.
 */
package (
    evaluateStream
    evaluate
    parse)
with
    import 'akh::base' {sequence sequencea},
    import 'akh::state' State,
    import 'zipper-m::trans::zipper' ZipperT,
    
    import 'bennu::parse' {
        rec
        run
        eager
        either
        next
        many},
    import 'bennu::lang' {
        between
        sepEndBy},
    import 'bennu::text' {
        character
        oneOf
        noneOf},
        
    import 'nu-stream::stream' stream#{first rest isEmpty map NIL},
    import 'nu-stream::gen' {repeat},
        
    import 'neith::zipper' zipper,
    import 'neith::list' {listZipperIn}
in {

var charCode := Function.prototype.call.bind(String.prototype.charCodeAt);
var fromCharCode := String.fromCharCode;

/* Parser
 ******************************************************************************/
with
    op := oneOf '><+-.,',
    
    other := many <| noneOf "><+-.,[]",
    
    block := between @ (character '[', character ']'),
    
    program := rec\self ->
        next(
            other,
            eager <| sepEndBy(other,
                either(
                    op,
                    block self)))
in {
    parse = run @ program;
}

/* Semantics
 ******************************************************************************/
var M = ZipperT (State);

// Basic
////////////////////////////////////////
var inc := M.move zipper.modify@(+, 1);
var dec := M.move zipper.modify@(_ -, 1);

var right := M.move zipper.right;
var left := M.move zipper.left;

var set = \x -> M.move  zipper.replace@x;

// Iteration/Sequencing
////////////////////////////////////////
var loop := \body -> let
    loop := M.extract.chain \ x ->
        ?x === 0
            :M.of(null)
            :sequence(body, loop)
in loop;

// IO
////////////////////////////////////////
static console;

var get := let
    eof = set 0
in
    (M.lift State.get).chain \ i ->
        ?isEmpty i
            :eof
            :sequence(
                set <| first i,
                M.lift (M.inner.modify rest));

var put := M.extract.map \ x -> {
    console.log(fromCharCode(x));
    return x;
};

/* Mapping
 ******************************************************************************/
var semantics = \code ->
    code.map \ x -> {
        switch (x) {
        case '+': return inc;
        case '-': return dec;
        case '>': return right;
        case '<': return left;
        case '.': return put;
        case ',': return get;
        default:  return loop <| sequencea <| semantics x;
        }
    };

/* Evaluation
 ******************************************************************************/
var memory := listZipperIn(NIL, 0, repeat(Infinity, 0));

var exec = \program input ->
    State.evalState(
        ZipperT.runZipperT(program, memory),
        map(charCode, input));

evaluateStream = \program input ->
    exec(
        sequencea <| semantics <| parse program,
        input);

evaluate = \program input ->
    evaluateStream(
        program,
        stream.from input);

}